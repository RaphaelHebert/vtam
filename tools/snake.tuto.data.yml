MARKER=None
if "MARKER" in config:
    MARKER = config["MARKER"]

PROJECT = config["PROJECT"]
PACKAGE_PATH = config["PACKAGE_PATH"]

import vtam

rule all_two_markers:
    input:
        taxonomy="vtam_db/taxonomy.tsv",
        nhr="vtam_db/coi_blast_db/coi_blast_db.nhr",
        nin="vtam_db/coi_blast_db/coi_blast_db.nin",
        nog="vtam_db/coi_blast_db/coi_blast_db.nog",
        nsd="vtam_db/coi_blast_db/coi_blast_db.nsd",
        nsi="vtam_db/coi_blast_db/coi_blast_db.nsi",
        nsq="vtam_db/coi_blast_db/coi_blast_db.nsq",
        fastq1="fastq/mfzr_1_fw.fastq",
        fastq2="fastq/mfzr_3_rv.fastq",
        fastq3="fastq/zfzr_1_fw.fastq",
        fastq4="fastq/zfzr_3_rv.fastq",
        fastqinfo=expand("{PROJECT}/user_input/fastqinfo.tsv", PROJECT=PROJECT),
        known_occurrences=expand("{PROJECT}/user_input/known_occurrences.tsv", PROJECT=PROJECT),
        pool_run_marker=expand("{PROJECT}/user_input/pool_run_marker.tsv", PROJECT=PROJECT),
        params=expand("{PROJECT}/user_input/params.yml", PROJECT=PROJECT),
        params2=expand("{PROJECT}/user_input/params_{MARKER}.yml", MARKER=['mfzr', 'zfzr'], PROJECT=PROJECT),
        snakeconfig=expand("{PROJECT}/user_input/snakeconfig.yml", PROJECT=PROJECT),
        snakefile="snakefile.yml",
        readinfo=expand("{PROJECT}/user_input/readinfo_{MARKER}.tsv", MARKER=['mfzr', 'zfzr'], PROJECT=PROJECT),

rule all_one_marker:
    input:
        taxonomy="vtam_db/taxonomy.tsv",
        nhr="vtam_db/coi_blast_db/coi_blast_db.nhr",
        nin="vtam_db/coi_blast_db/coi_blast_db.nin",
        nog="vtam_db/coi_blast_db/coi_blast_db.nog",
        nsd="vtam_db/coi_blast_db/coi_blast_db.nsd",
        nsi="vtam_db/coi_blast_db/coi_blast_db.nsi",
        nsq="vtam_db/coi_blast_db/coi_blast_db.nsq",
        fastq1="fastq/mfzr_1_fw.fastq",
        fastq2="fastq/mfzr_3_rv.fastq",
        fastq3="fastq/zfzr_1_fw.fastq",
        fastq4="fastq/zfzr_3_rv.fastq",
        fastqinfo=expand("{PROJECT}/user_input/fastqinfo_{MARKER}.tsv", MARKER=MARKER, PROJECT=PROJECT),
        known_occurrences=expand("{PROJECT}/user_input/known_occurrences_{MARKER}.tsv", MARKER=MARKER, PROJECT=PROJECT),
        pool_run_marker=expand("{PROJECT}/user_input/pool_run_marker.tsv", PROJECT=PROJECT),
        params=expand("{PROJECT}/user_input/params_{MARKER}.yml", MARKER=MARKER, PROJECT=PROJECT),
        snakeconfig=expand("{PROJECT}/user_input/snakeconfig_{MARKER}.yml", MARKER=MARKER, PROJECT=PROJECT),
        snakefile="snakefile.yml",

rule snakefile:
    input:
        snakefile=os.path.join(PACKAGE_PATH, 'snakefile.yml'),
    output:
        snakefile="snakefile.yml",
    shell:
        """rsync -avt {input.snakefile} {output.snakefile}"""

rule user_input_two_markers:
    input:
        fastqinfo=os.path.join(PACKAGE_PATH, 'doc/data', 'fastqinfo.tsv'),
        known_occurrences=os.path.join(PACKAGE_PATH, 'doc/data', 'known_occurrences.tsv'),
        params=os.path.join(PACKAGE_PATH, 'doc/data', 'params.yml'),
        snakeconfig=os.path.join(PACKAGE_PATH, 'doc/data', 'snakeconfig.yml'),
        readinfo_mfzr=os.path.join(PACKAGE_PATH, 'doc/data', 'readinfo_mfzr.tsv'),
        readinfo_zfzr=os.path.join(PACKAGE_PATH, 'doc/data', 'readinfo_zfzr.tsv'),
    output:
        fastqinfo="{PROJECT}/user_input/fastqinfo.tsv",
        known_occurrences="{PROJECT}/user_input/known_occurrences.tsv",
        params="{PROJECT}/user_input/params.yml",
        snakeconfig="{PROJECT}/user_input/snakeconfig.yml",
        readinfo_mfzr="{PROJECT}/user_input/readinfo_mfzr.tsv",
        readinfo_zfzr="{PROJECT}/user_input/readinfo_zfzr.tsv",
    shell:
        """rsync -avt {input.fastqinfo} {output.fastqinfo}
rsync -avt {input.known_occurrences} {output.known_occurrences}
rsync -avt {input.params} {output.params}
rsync -avt {input.snakeconfig} {output.snakeconfig}
rsync -avt {input.readinfo_mfzr} {output.readinfo_mfzr}
rsync -avt {input.readinfo_zfzr} {output.readinfo_zfzr}"""

rule user_input_params:
    input:
        params=os.path.join(PACKAGE_PATH, 'doc/data', 'params_{MARKER}.yml'),
    output:
        params="{PROJECT}/user_input/params_{MARKER}.yml",
    shell:
        """rsync -avt {input.params} {output.params}"""


rule user_input_one_marker:
    input:
        fastqinfo=os.path.join(PACKAGE_PATH, 'doc/data', 'fastqinfo_{MARKER}.tsv'),
        known_occurrences=os.path.join(PACKAGE_PATH, 'doc/data', 'known_occurrences_{MARKER}.tsv'),
        snakeconfig=os.path.join(PACKAGE_PATH, 'doc/data', 'snakeconfig_{MARKER}.yml'),
    output:
        fastqinfo="{PROJECT}/user_input/fastqinfo_{MARKER}.tsv",
        known_occurrences="{PROJECT}/user_input/known_occurrences_{MARKER}.tsv",
        snakeconfig="{PROJECT}/user_input/snakeconfig_{MARKER}.yml",
    shell:
        """rsync -avt {input.fastqinfo} {output.fastqinfo}
rsync -avt {input.known_occurrences} {output.known_occurrences}
rsync -avt {input.snakeconfig} {output.snakeconfig}"""

rule user_input_pool_marker:
    input:
        pool_run_marker=os.path.join(PACKAGE_PATH, 'doc/data', 'pool_run_marker.tsv'),
    output:
        pool_run_marker="{PROJECT}/user_input/pool_run_marker.tsv",
    shell:
        """rsync -avt {input.pool_run_marker} {output.pool_run_marker}"""

rule fastq:
    output:
        fastq1="fastq/mfzr_1_fw.fastq",
        fastq2="fastq/mfzr_3_rv.fastq",
        fastq3="fastq/zfzr_1_fw.fastq",
        fastq4="fastq/zfzr_3_rv.fastq",
    params:
        gz="http://pedagogix-tagc.univ-mrs.fr/~gonzalez/vtam/fastq.tar.gz",
    shell:
        """
wget -N {params.gz} -O fastq.tar.gz;
tar zxvf fastq.tar.gz -C $(dirname $(dirname {output.fastq1} ) )
rm -f fastq.tar.gz
"""

rule coi_blast_db:
    output:
        nhr="vtam_db/coi_blast_db/coi_blast_db.nhr",
        nin="vtam_db/coi_blast_db/coi_blast_db.nin",
        nog="vtam_db/coi_blast_db/coi_blast_db.nog",
        nsd="vtam_db/coi_blast_db/coi_blast_db.nsd",
        nsi="vtam_db/coi_blast_db/coi_blast_db.nsi",
        nsq="vtam_db/coi_blast_db/coi_blast_db.nsq",
    shell:
        "vtam coi_blast_db --coi_blast_db_dir $(dirname {output.nhr})"

rule taxonomy:
    output:
        taxonomy="vtam_db/taxonomy.tsv",
    shell:
        "vtam taxonomy -o {output.taxonomy} --precomputed"

