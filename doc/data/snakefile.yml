project = config['project']
subproject = config['subproject']
fastqinfo = config['fastqinfo']
fastqdir = config['fastqdir']
known_occurrences = config['known_occurrences']
if 'params' in config:
    params = config['params']
blastdbdir = config['blastdbdir']
blastdbname = config['blastdbname']
taxonomy = config['taxonomy']

outdir = os.path.join(project, subproject)

rule all:
    input:
        variant_taxa=expand("{outdir}/asvtable_default_taxa.tsv", outdir=outdir),

rule optimize:
    input:
        optimize_lfn_biosample_replicate=expand("{outdir}/optimize_lfn_biosample_replicate.tsv", outdir=outdir),
        optimize_lfn_read_count_and_lfn_variant=expand("{outdir}/optimize_lfn_read_count_and_lfn_variant.tsv", outdir=outdir),
        optimize_lfn_variant_specific=expand("{outdir}/optimize_lfn_variant_specific.tsv", outdir=outdir),
        optimize_pcr_error=expand("{outdir}/optimize_pcr_error.tsv", outdir=outdir),

rule asvtable_taxa:
    input:
        variant_taxa=expand("{outdir}/asvtable_default_taxa.tsv", outdir=outdir),

rule asvtable_params_taxa:
    input:
        variant_taxa=expand("{outdir}/asvtable_params_taxa.tsv", outdir=outdir),

rule optimize_tmp:
    input:
        asvtable="{outdir}/asvtable_default_taxa.tsv",
        readinfo="{outdir}/sorted/readinfo.tsv",
        known_occurrences=known_occurrences,
    output:
        optimize_lfn_biosample_replicate="{outdir}/optimize_lfn_biosample_replicate.tsv",
        optimize_lfn_read_count_and_lfn_variant="{outdir}/optimize_lfn_read_count_and_lfn_variant.tsv",
        optimize_lfn_variant_specific="{outdir}/optimize_lfn_variant_specific.tsv",
        optimize_pcr_error="{outdir}/optimize_pcr_error.tsv",
    resources:
        db=1
    params:
        db=os.path.join(project, 'db.sqlite'),
        log=os.path.join(project, "vtam.log"),
    shell:
        "vtam optimize --db {params.db} --readinfo {input.readinfo} --readdir $(dirname {input.readinfo}) --known_occurrences  {input.known_occurrences} --outdir $(dirname {output.optimize_lfn_biosample_replicate}) -v --log {params.log}"

rule asvtable_taxa_tmp:
    input:
        nhr="{}/{}.nhr".format(blastdbdir, blastdbname),
        nin="{}/{}.nin".format(blastdbdir, blastdbname),
        nog="{}/{}.nog".format(blastdbdir, blastdbname),
        nsd="{}/{}.nsd".format(blastdbdir, blastdbname),
        nsi="{}/{}.nsi".format(blastdbdir, blastdbname),
        nsq="{}/{}.nsq".format(blastdbdir, blastdbname),
        taxonomy=taxonomy,
        variants="{outdir}/asvtable_default.tsv",
    output:
        variant_taxa="{outdir}/asvtable_default_taxa.tsv",
    params:
        db=os.path.join(project, 'db.sqlite'),
        log=os.path.join(project, "vtam.log"),
    shell:
        "vtam taxassign --db {params.db} --variants {input.variants} --output {output.variant_taxa} --taxonomy {input.taxonomy} --blastdbdir $(dirname {input.nhr}) --blastdbname coi_blast_db -v --log {params.log}"

rule asvtable_params_taxa_tmp:
    input:
        nhr="{}/{}.nhr".format(blastdbdir, blastdbname),
        nin="{}/{}.nin".format(blastdbdir, blastdbname),
        nog="{}/{}.nog".format(blastdbdir, blastdbname),
        nsd="{}/{}.nsd".format(blastdbdir, blastdbname),
        nsi="{}/{}.nsi".format(blastdbdir, blastdbname),
        nsq="{}/{}.nsq".format(blastdbdir, blastdbname),
        taxonomy=taxonomy,
        variants="{outdir}/asvtable_params.tsv",
    output:
        variant_taxa="{outdir}/asvtable_params_taxa.tsv",
    params:
        db=os.path.join(project, 'db.sqlite'),
        log=os.path.join(project, "vtam.log"),
    shell:
        "vtam taxassign --db {params.db} --variants {input.variants} --output {output.variant_taxa} --taxonomy {input.taxonomy} --blastdbdir $(dirname {input.nhr}) --blastdbname coi_blast_db -v --log {params.log}"

rule filter_params:
    input:
        readinfo="{outdir}/sorted/readinfo.tsv",
        params=params,
    output:
        asvtable="{outdir}/asvtable_params.tsv",
    resources:
        db=1
    params:
        db=os.path.join(project, 'db.sqlite'),
        log=os.path.join(project, "vtam.log"),
    shell:
        "vtam filter --db {params.db} --readinfo {input.readinfo} --readdir $(dirname {input.readinfo}) --params {input.params} --asvtable {output.asvtable} -v --log {params.log}"

rule filter:
    input:
        readinfo="{outdir}/sorted/readinfo.tsv",
    output:
        asvtable="{outdir}/asvtable_default.tsv",
    resources:
        db=1
    params:
        db=os.path.join(project, 'db.sqlite'),
        log=os.path.join(project, "vtam.log"),
    shell:
        "vtam filter --db {params.db} --readinfo {input.readinfo} --readdir $(dirname {input.readinfo}) --asvtable {output.asvtable} -v --log {params.log}"

rule sortreads:
    input:
        fastainfo="{outdir}/fastainfo.tsv",
    output:
        readinfo="{outdir}/sorted/readinfo.tsv",
    resources:
        db=1
    params:
        log=os.path.join(project, "vtam.log"),
    shell:
        """vtam sortreads --fastainfo {input.fastainfo} --fastadir $(dirname {input.fastainfo})/merged --outdir $(dirname {output.readinfo}) -v --log {params.log}"""

rule merge:
    input:
        fastqinfo=fastqinfo,
    output:
        fastainfo="{outdir}/fastainfo.tsv",
    resources:
        db=1
    params:
        fastqdir=fastqdir,
        log=os.path.join(project, "vtam.log"),
    shell:
        "vtam merge --fastqinfo {input.fastqinfo} --fastqdir {params.fastqdir} --fastainfo {output.fastainfo} --fastadir $(dirname {output.fastainfo})/merged -v --log {params.log}"

